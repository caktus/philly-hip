---
# CI/CD Workflow for the hip project.
# Builds, tests and deploys the current branch to an EKS cluster.
# This CI/CD configuration depends on some environment variables being set at the project level:
#
# ANSIBLE_VAULT_PASS: Allows ansible to decrypt secrets during the deploy job
# AWS_ACCESS_KEY_ID: Provides key to the aws-cli orb
# AWS_SECRET_ACCESS_KEY: Provides key to the aws-cli orb
# AWS_DEFAULT_REGION: us-east-1

version: 2.1


commands:
  restore_cache_cmd:
    steps:
      - restore_cache:
          keys:
            - v1-pip-{{ checksum "requirements/dev/dev.txt" }}-{{ checksum "requirements/base/base.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-pip-
  save_cache_cmd:
    steps:
      - save_cache:
          paths:
            - "env"
          key: v1-pip-{{ checksum "requirements/dev/dev.txt" }}-{{ checksum "requirements/base/base.txt" }}

orbs:
  docker: circleci/docker@1.0.1
  slack: circleci/slack@3.4.2

jobs:
  deploy:
    parameters:
      environment:
        default: "staging"
        type: string
    executor: docker/docker
    working_directory: ~/hip

    steps:
      - checkout
      - restore_cache_cmd
      - slack/notify:
          message: ":deploying: ${CIRCLE_BRANCH} branch"
          color: "#3346FF"
          include_project_field: false
          include_job_number_field: false
          include_visit_job_action: false
      - run:
          name: Install Dependencies
          command: |
            python3 -m venv env
            . env/bin/activate

            pip install -r requirements/dev/dev.txt
      - save_cache_cmd
      - run:
          name: Login
          command: |
            . env/bin/activate
            inv aws.docker-login
      - setup_remote_docker
      - run:
          name: Build Image
          command: |
            . env/bin/activate

            inv deploy.install
            inv "<< parameters.environment >>" project.build-deploy
      - slack/status:
          success_message: ":rocket: Deployed ${CIRCLE_BRANCH} branch. <${CIRCLE_BUILD_URL}|Deploy Status> :success:"
          failure_message: ":sadpanda: Failed to deploy ${CIRCLE_BRANCH} branch. <${CIRCLE_BUILD_URL}|Deploy Status> :red_circle:"
          include_project_field: false
          include_job_number_field: false
          include_visit_job_action: false

  test:
    docker:
      - image: circleci/python:3.8-buster
        environment:
          DJANGO_SETTINGS_MODULE: hip.settings.dev
          DATABASE_URL: postgres://ubuntu@127.0.0.1:5432/hip_ci
      - image: circleci/postgres:11-alpine-ram
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_DB: hip_ci
    steps:
      - checkout
      - restore_cache_cmd
      - run:
          name: install dependencies
          command: |
            python3 -m venv env
            . env/bin/activate
            pip install -U -q pip-tools pip wheel
            pip-sync requirements/base/base.txt requirements/dev/dev.txt
      - run:
          name: run pre-commit
          command: |
            . env/bin/activate
            pre-commit run -v -a
      - run:
          name: Run tests
          command: |
            . env/bin/activate
            python manage.py makemigrations --dry-run --check
            pytest
      - slack/status:
          success_message: ":caktus: ${CIRCLE_BRANCH} tests passed. <${CIRCLE_BUILD_URL}|Build> :successful:"
          failure_message: ":sadcactus: ${CIRCLE_BRANCH} tests failed. <${CIRCLE_BUILD_URL}|Build> :failed:"
          include_project_field: false
          include_job_number_field: false
          include_visit_job_action: false

workflows:
  version: 2
  build_deploy:
    jobs:
      - test
      - deploy:
          requires:
            - test
          filters:
            branches:
              only:
                - develop
      - deploy:
          environment: "production"
          requires:
            - test
          filters:
            branches:
              only:
                - main
