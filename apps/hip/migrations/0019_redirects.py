# Generated by Django 3.1.8 on 2021-05-20 12:37

import os

from django.db import migrations
from django.shortcuts import reverse


def create_redirects(apps, schema_editor):
    """
    Create redirects programmatically for URLs on the old site to their pages on the new site.
    """
    Redirect = apps.get_model("wagtailredirects", "Redirect")
    Page = apps.get_model("wagtailcore", "Page")

    # A list of URLs that should get redirected to Pages.
    redirect_to_pages_list = [
        ("/HealthAlerts", Page.objects.filter(title="Health Alerts").first()),
        (
            "/DataReports",
            Page.objects.filter(title="Data, Reports, and Statistics").first(),
        ),
        ("/ReportDisease", Page.objects.filter(title="Report A Disease").first()),
        ("/EmergencyResponse", Page.objects.filter(title="Emergency Response").first()),
        (
            "/EmergencyResponse/ClosedPOD",
            Page.objects.filter(title="Closed POD").first(),
        ),
        (
            "/EmergencyResponse/PCWMSA",
            Page.objects.filter(title="PCW MSA Secure Site").first(),
        ),
        (
            "/EmergentHealthTopics/2019-nCoV/VaccineAdvisoryCommittee",
            Page.objects.filter(title="Health Information Portal (HIP)").first()
        ),
    ]
    for (old_url, new_page) in redirect_to_pages_list:
        if not Redirect.objects.filter(
            old_path=old_url, redirect_page=new_page
        ).exists():
            Redirect.objects.create(old_path=old_url, redirect_page=new_page)

    # Get the domain and scheme for any new URLs that are not associated with a Page.
    domain = os.getenv("DOMAIN", "")
    if domain:
        scheme = "https"
    else:
        domain = "localhost:8000"
        scheme = "http"
    # A list of URLs that should get redirected to new URLs (that don't have an associated Page).
    redirect_to_urls_list = [
        (
            "/HealthAlerts/SignUpHealthAlerts",
            f"{scheme}://{domain}{reverse('health_alert_subscriber')}",
        ),
        # TODO: uncomment after this form is created.
        # (
        #     "/EmergencyResponse/EmployeeAlertSystem/ContactForm",
        #     f"{scheme}://{domain}{reverse('employee_alerts_signup')}"
        # ),
    ]
    for (old_url, new_url) in redirect_to_urls_list:
        if not Redirect.objects.filter(
            old_path=old_url, redirect_link=new_url
        ).exists():
            Redirect.objects.create(old_path=old_url, redirect_link=new_url)


class Migration(migrations.Migration):

    dependencies = [
        ("hip", "0018_staticpage_action_section"),
    ]

    operations = [migrations.RunPython(create_redirects, migrations.RunPython.noop)]
